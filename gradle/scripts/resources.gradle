String getConfig(String key) {
    return project.properties.get(key)
}

def mod_id = getConfig("mod_id")
def version = getConfig("version")
def mod_license = getConfig("mod_license")
def mod_name = getConfig("mod_name")
def mod_description = getConfig("mod_description")
def mod_url = getConfig("mod_url")
def mod_issue_tracker = getConfig("mod_issue_tracker")

// Create run-folders for non-client configs to avoid pollution of dev envs
tasks.matching { it.name.startsWith('prepare') }.configureEach {
    doFirst {
        mkdir('runs')
        mkdir('runs/server')
        mkdir('runs/data')
        mkdir('runs/client')
        mkdir('runs/client2')
    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var forgeVers = libs.versions.forge.get().split("\\.")[0]
    var replaceProperties = [
            version             : mod_version,
            mod_id              : mod_id,
            minecraft_version   : libs.versions.minecraft.get(),
            loader_version      : forgeVers,
            forge_version       : forgeVers, // only specify major version of forge
            mod_license         : mod_license,
            mod_name            : mod_name,
            mod_authors         : mod_authors,
            mod_description     : mod_description,
            mod_url             : mod_url,
            mod_issue_tracker   : mod_issue_tracker
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
legacyForge.ideSyncTask generateModMetadata